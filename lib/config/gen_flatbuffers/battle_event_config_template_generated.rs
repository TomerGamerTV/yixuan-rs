// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum BattleEventConfigTemplateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BattleEventConfigTemplate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BattleEventConfigTemplate<'a> {
  type Inner = BattleEventConfigTemplate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BattleEventConfigTemplate<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LEVEL_DESIGN_ID: flatbuffers::VOffsetT = 6;
  pub const VT_DESC_1: flatbuffers::VOffsetT = 8;
  pub const VT_DESC_2: flatbuffers::VOffsetT = 10;
  pub const VT_UNLOCK_CONDITION: flatbuffers::VOffsetT = 12;
  pub const VT_PLAY_TYPE: flatbuffers::VOffsetT = 14;
  pub const VT_UNK_1: flatbuffers::VOffsetT = 16;
  pub const VT_UNK_2: flatbuffers::VOffsetT = 18;
  pub const VT_UNK_3: flatbuffers::VOffsetT = 20;
  pub const VT_UNK_4: flatbuffers::VOffsetT = 22;
  pub const VT_DESC: flatbuffers::VOffsetT = 24;
  pub const VT_UNK_5: flatbuffers::VOffsetT = 26;
  pub const VT_UNK_6: flatbuffers::VOffsetT = 28;
  pub const VT_UNK_7: flatbuffers::VOffsetT = 30;
  pub const VT_UNK_8: flatbuffers::VOffsetT = 32;
  pub const VT_UNK_9: flatbuffers::VOffsetT = 34;
  pub const VT_UNK_10: flatbuffers::VOffsetT = 36;
  pub const VT_UNK_11: flatbuffers::VOffsetT = 38;
  pub const VT_UNK_12: flatbuffers::VOffsetT = 40;
  pub const VT_NORMAL_DROP: flatbuffers::VOffsetT = 42;
  pub const VT_UNK_13: flatbuffers::VOffsetT = 44;
  pub const VT_UNK_14: flatbuffers::VOffsetT = 46;
  pub const VT_UNK_15: flatbuffers::VOffsetT = 48;
  pub const VT_UNK_16: flatbuffers::VOffsetT = 50;
  pub const VT_UNK_17: flatbuffers::VOffsetT = 52;
  pub const VT_UNK_18: flatbuffers::VOffsetT = 54;
  pub const VT_UNK_19: flatbuffers::VOffsetT = 56;
  pub const VT_UNK_20: flatbuffers::VOffsetT = 58;
  pub const VT_UNK_21: flatbuffers::VOffsetT = 60;
  pub const VT_UNK_22: flatbuffers::VOffsetT = 62;
  pub const VT_UNK_23: flatbuffers::VOffsetT = 64;
  pub const VT_UNK_24: flatbuffers::VOffsetT = 66;
  pub const VT_UNK_25: flatbuffers::VOffsetT = 68;
  pub const VT_UNK_26: flatbuffers::VOffsetT = 70;
  pub const VT_UNK_27: flatbuffers::VOffsetT = 72;
  pub const VT_UNK_28: flatbuffers::VOffsetT = 74;
  pub const VT_UNK_29: flatbuffers::VOffsetT = 76;
  pub const VT_UNK_30: flatbuffers::VOffsetT = 78;
  pub const VT_UNK_31: flatbuffers::VOffsetT = 80;
  pub const VT_UNK_32: flatbuffers::VOffsetT = 82;
  pub const VT_UNK_33: flatbuffers::VOffsetT = 84;
  pub const VT_UNK_34: flatbuffers::VOffsetT = 86;
  pub const VT_UNK_35: flatbuffers::VOffsetT = 88;
  pub const VT_UNK_36: flatbuffers::VOffsetT = 90;
  pub const VT_UNK_37: flatbuffers::VOffsetT = 92;
  pub const VT_UNK_38: flatbuffers::VOffsetT = 94;
  pub const VT_UNK_39: flatbuffers::VOffsetT = 96;
  pub const VT_UNK_40: flatbuffers::VOffsetT = 98;
  pub const VT_UNK_41: flatbuffers::VOffsetT = 100;
  pub const VT_UNK_42: flatbuffers::VOffsetT = 102;
  pub const VT_UNK_43: flatbuffers::VOffsetT = 104;
  pub const VT_UNK_44: flatbuffers::VOffsetT = 106;
  pub const VT_UNK_45: flatbuffers::VOffsetT = 108;
  pub const VT_UNK_46: flatbuffers::VOffsetT = 110;
  pub const VT_UNK_47: flatbuffers::VOffsetT = 112;
  pub const VT_UNK_48: flatbuffers::VOffsetT = 114;
  pub const VT_UNK_49: flatbuffers::VOffsetT = 116;
  pub const VT_UNK_50: flatbuffers::VOffsetT = 118;
  pub const VT_SPECIAL_REWARD: flatbuffers::VOffsetT = 120;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BattleEventConfigTemplate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BattleEventConfigTemplateArgs<'args>
  ) -> flatbuffers::WIPOffset<BattleEventConfigTemplate<'bldr>> {
    let mut builder = BattleEventConfigTemplateBuilder::new(_fbb);
    if let Some(x) = args.special_reward { builder.add_special_reward(x); }
    builder.add_unk_50(args.unk_50);
    builder.add_unk_49(args.unk_49);
    builder.add_unk_47(args.unk_47);
    builder.add_unk_45(args.unk_45);
    builder.add_unk_44(args.unk_44);
    builder.add_unk_43(args.unk_43);
    builder.add_unk_42(args.unk_42);
    builder.add_unk_41(args.unk_41);
    builder.add_unk_40(args.unk_40);
    builder.add_unk_39(args.unk_39);
    builder.add_unk_38(args.unk_38);
    builder.add_unk_37(args.unk_37);
    builder.add_unk_36(args.unk_36);
    builder.add_unk_35(args.unk_35);
    builder.add_unk_34(args.unk_34);
    builder.add_unk_33(args.unk_33);
    builder.add_unk_32(args.unk_32);
    builder.add_unk_31(args.unk_31);
    builder.add_unk_28(args.unk_28);
    if let Some(x) = args.unk_27 { builder.add_unk_27(x); }
    if let Some(x) = args.unk_26 { builder.add_unk_26(x); }
    builder.add_unk_25(args.unk_25);
    if let Some(x) = args.unk_24 { builder.add_unk_24(x); }
    builder.add_unk_23(args.unk_23);
    builder.add_unk_20(args.unk_20);
    builder.add_unk_19(args.unk_19);
    builder.add_unk_18(args.unk_18);
    builder.add_unk_17(args.unk_17);
    builder.add_unk_16(args.unk_16);
    if let Some(x) = args.unk_15 { builder.add_unk_15(x); }
    builder.add_unk_14(args.unk_14);
    builder.add_unk_13(args.unk_13);
    if let Some(x) = args.normal_drop { builder.add_normal_drop(x); }
    if let Some(x) = args.unk_12 { builder.add_unk_12(x); }
    builder.add_unk_11(args.unk_11);
    builder.add_unk_10(args.unk_10);
    builder.add_unk_9(args.unk_9);
    if let Some(x) = args.unk_8 { builder.add_unk_8(x); }
    builder.add_unk_7(args.unk_7);
    builder.add_unk_6(args.unk_6);
    builder.add_unk_5(args.unk_5);
    if let Some(x) = args.desc { builder.add_desc(x); }
    builder.add_unk_4(args.unk_4);
    if let Some(x) = args.unk_3 { builder.add_unk_3(x); }
    if let Some(x) = args.unk_2 { builder.add_unk_2(x); }
    builder.add_unk_1(args.unk_1);
    builder.add_play_type(args.play_type);
    if let Some(x) = args.unlock_condition { builder.add_unlock_condition(x); }
    if let Some(x) = args.desc_2 { builder.add_desc_2(x); }
    if let Some(x) = args.desc_1 { builder.add_desc_1(x); }
    builder.add_level_design_id(args.level_design_id);
    builder.add_id(args.id);
    builder.add_unk_48(args.unk_48);
    builder.add_unk_46(args.unk_46);
    builder.add_unk_30(args.unk_30);
    builder.add_unk_29(args.unk_29);
    builder.add_unk_22(args.unk_22);
    builder.add_unk_21(args.unk_21);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(BattleEventConfigTemplate::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn level_design_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(BattleEventConfigTemplate::VT_LEVEL_DESIGN_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn desc_1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_DESC_1, None)}
  }
  #[inline]
  pub fn desc_2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_DESC_2, None)}
  }
  #[inline]
  pub fn unlock_condition(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_UNLOCK_CONDITION, None)}
  }
  #[inline]
  pub fn play_type(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(BattleEventConfigTemplate::VT_PLAY_TYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_1(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_UNK_2, None)}
  }
  #[inline]
  pub fn unk_3(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_UNK_3, None)}
  }
  #[inline]
  pub fn unk_4(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_4, Some(0)).unwrap()}
  }
  #[inline]
  pub fn desc(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_DESC, None)}
  }
  #[inline]
  pub fn unk_5(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_5, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_6(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_6, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_7(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_7, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_8(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_UNK_8, None)}
  }
  #[inline]
  pub fn unk_9(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_9, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_10(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_10, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_11(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_11, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_12(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_UNK_12, None)}
  }
  #[inline]
  pub fn normal_drop(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_NORMAL_DROP, None)}
  }
  #[inline]
  pub fn unk_13(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_13, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_14(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_14, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_15(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_UNK_15, None)}
  }
  #[inline]
  pub fn unk_16(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_16, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_17(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_17, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_18(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_18, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_19(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_19, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_20(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_20, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_21(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(BattleEventConfigTemplate::VT_UNK_21, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_22(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(BattleEventConfigTemplate::VT_UNK_22, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_23(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_23, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_24(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_UNK_24, None)}
  }
  #[inline]
  pub fn unk_25(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_25, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_26(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_UNK_26, None)}
  }
  #[inline]
  pub fn unk_27(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattleEventConfigTemplate::VT_UNK_27, None)}
  }
  #[inline]
  pub fn unk_28(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_28, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_29(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(BattleEventConfigTemplate::VT_UNK_29, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_30(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(BattleEventConfigTemplate::VT_UNK_30, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_31(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_31, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_32(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_32, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_33(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_33, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_34(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_34, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_35(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_35, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_36(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_36, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_37(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_37, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_38(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_38, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_39(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_39, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_40(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_40, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_41(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_41, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_42(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_42, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_43(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_43, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_44(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_44, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_45(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_45, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_46(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(BattleEventConfigTemplate::VT_UNK_46, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_47(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_47, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_48(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(BattleEventConfigTemplate::VT_UNK_48, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_49(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_49, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_50(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleEventConfigTemplate::VT_UNK_50, Some(0)).unwrap()}
  }
  #[inline]
  pub fn special_reward(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(BattleEventConfigTemplate::VT_SPECIAL_REWARD, None)}
  }
}

impl flatbuffers::Verifiable for BattleEventConfigTemplate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .visit_field::<u32>("level_design_id", Self::VT_LEVEL_DESIGN_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("desc_1", Self::VT_DESC_1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("desc_2", Self::VT_DESC_2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unlock_condition", Self::VT_UNLOCK_CONDITION, false)?
     .visit_field::<u32>("play_type", Self::VT_PLAY_TYPE, false)?
     .visit_field::<i32>("unk_1", Self::VT_UNK_1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_2", Self::VT_UNK_2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_3", Self::VT_UNK_3, false)?
     .visit_field::<i32>("unk_4", Self::VT_UNK_4, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("desc", Self::VT_DESC, false)?
     .visit_field::<i32>("unk_5", Self::VT_UNK_5, false)?
     .visit_field::<i32>("unk_6", Self::VT_UNK_6, false)?
     .visit_field::<i32>("unk_7", Self::VT_UNK_7, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_8", Self::VT_UNK_8, false)?
     .visit_field::<i32>("unk_9", Self::VT_UNK_9, false)?
     .visit_field::<i32>("unk_10", Self::VT_UNK_10, false)?
     .visit_field::<i32>("unk_11", Self::VT_UNK_11, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_12", Self::VT_UNK_12, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("normal_drop", Self::VT_NORMAL_DROP, false)?
     .visit_field::<i32>("unk_13", Self::VT_UNK_13, false)?
     .visit_field::<i32>("unk_14", Self::VT_UNK_14, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_15", Self::VT_UNK_15, false)?
     .visit_field::<i32>("unk_16", Self::VT_UNK_16, false)?
     .visit_field::<i32>("unk_17", Self::VT_UNK_17, false)?
     .visit_field::<i32>("unk_18", Self::VT_UNK_18, false)?
     .visit_field::<i32>("unk_19", Self::VT_UNK_19, false)?
     .visit_field::<i32>("unk_20", Self::VT_UNK_20, false)?
     .visit_field::<bool>("unk_21", Self::VT_UNK_21, false)?
     .visit_field::<bool>("unk_22", Self::VT_UNK_22, false)?
     .visit_field::<i32>("unk_23", Self::VT_UNK_23, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_24", Self::VT_UNK_24, false)?
     .visit_field::<i32>("unk_25", Self::VT_UNK_25, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_26", Self::VT_UNK_26, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_27", Self::VT_UNK_27, false)?
     .visit_field::<i32>("unk_28", Self::VT_UNK_28, false)?
     .visit_field::<bool>("unk_29", Self::VT_UNK_29, false)?
     .visit_field::<bool>("unk_30", Self::VT_UNK_30, false)?
     .visit_field::<i32>("unk_31", Self::VT_UNK_31, false)?
     .visit_field::<i32>("unk_32", Self::VT_UNK_32, false)?
     .visit_field::<i32>("unk_33", Self::VT_UNK_33, false)?
     .visit_field::<i32>("unk_34", Self::VT_UNK_34, false)?
     .visit_field::<i32>("unk_35", Self::VT_UNK_35, false)?
     .visit_field::<i32>("unk_36", Self::VT_UNK_36, false)?
     .visit_field::<i32>("unk_37", Self::VT_UNK_37, false)?
     .visit_field::<i32>("unk_38", Self::VT_UNK_38, false)?
     .visit_field::<i32>("unk_39", Self::VT_UNK_39, false)?
     .visit_field::<i32>("unk_40", Self::VT_UNK_40, false)?
     .visit_field::<i32>("unk_41", Self::VT_UNK_41, false)?
     .visit_field::<i32>("unk_42", Self::VT_UNK_42, false)?
     .visit_field::<i32>("unk_43", Self::VT_UNK_43, false)?
     .visit_field::<i32>("unk_44", Self::VT_UNK_44, false)?
     .visit_field::<i32>("unk_45", Self::VT_UNK_45, false)?
     .visit_field::<bool>("unk_46", Self::VT_UNK_46, false)?
     .visit_field::<i32>("unk_47", Self::VT_UNK_47, false)?
     .visit_field::<bool>("unk_48", Self::VT_UNK_48, false)?
     .visit_field::<i32>("unk_49", Self::VT_UNK_49, false)?
     .visit_field::<i32>("unk_50", Self::VT_UNK_50, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("special_reward", Self::VT_SPECIAL_REWARD, false)?
     .finish();
    Ok(())
  }
}
pub struct BattleEventConfigTemplateArgs<'a> {
    pub id: u32,
    pub level_design_id: u32,
    pub desc_1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub desc_2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unlock_condition: Option<flatbuffers::WIPOffset<&'a str>>,
    pub play_type: u32,
    pub unk_1: i32,
    pub unk_2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_3: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_4: i32,
    pub desc: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_5: i32,
    pub unk_6: i32,
    pub unk_7: i32,
    pub unk_8: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_9: i32,
    pub unk_10: i32,
    pub unk_11: i32,
    pub unk_12: Option<flatbuffers::WIPOffset<&'a str>>,
    pub normal_drop: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_13: i32,
    pub unk_14: i32,
    pub unk_15: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_16: i32,
    pub unk_17: i32,
    pub unk_18: i32,
    pub unk_19: i32,
    pub unk_20: i32,
    pub unk_21: bool,
    pub unk_22: bool,
    pub unk_23: i32,
    pub unk_24: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_25: i32,
    pub unk_26: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_27: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_28: i32,
    pub unk_29: bool,
    pub unk_30: bool,
    pub unk_31: i32,
    pub unk_32: i32,
    pub unk_33: i32,
    pub unk_34: i32,
    pub unk_35: i32,
    pub unk_36: i32,
    pub unk_37: i32,
    pub unk_38: i32,
    pub unk_39: i32,
    pub unk_40: i32,
    pub unk_41: i32,
    pub unk_42: i32,
    pub unk_43: i32,
    pub unk_44: i32,
    pub unk_45: i32,
    pub unk_46: bool,
    pub unk_47: i32,
    pub unk_48: bool,
    pub unk_49: i32,
    pub unk_50: i32,
    pub special_reward: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
}
impl<'a> Default for BattleEventConfigTemplateArgs<'a> {
  #[inline]
  fn default() -> Self {
    BattleEventConfigTemplateArgs {
      id: 0,
      level_design_id: 0,
      desc_1: None,
      desc_2: None,
      unlock_condition: None,
      play_type: 0,
      unk_1: 0,
      unk_2: None,
      unk_3: None,
      unk_4: 0,
      desc: None,
      unk_5: 0,
      unk_6: 0,
      unk_7: 0,
      unk_8: None,
      unk_9: 0,
      unk_10: 0,
      unk_11: 0,
      unk_12: None,
      normal_drop: None,
      unk_13: 0,
      unk_14: 0,
      unk_15: None,
      unk_16: 0,
      unk_17: 0,
      unk_18: 0,
      unk_19: 0,
      unk_20: 0,
      unk_21: false,
      unk_22: false,
      unk_23: 0,
      unk_24: None,
      unk_25: 0,
      unk_26: None,
      unk_27: None,
      unk_28: 0,
      unk_29: false,
      unk_30: false,
      unk_31: 0,
      unk_32: 0,
      unk_33: 0,
      unk_34: 0,
      unk_35: 0,
      unk_36: 0,
      unk_37: 0,
      unk_38: 0,
      unk_39: 0,
      unk_40: 0,
      unk_41: 0,
      unk_42: 0,
      unk_43: 0,
      unk_44: 0,
      unk_45: 0,
      unk_46: false,
      unk_47: 0,
      unk_48: false,
      unk_49: 0,
      unk_50: 0,
      special_reward: None,
    }
  }
}

pub struct BattleEventConfigTemplateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BattleEventConfigTemplateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(BattleEventConfigTemplate::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_level_design_id(&mut self, level_design_id: u32) {
    self.fbb_.push_slot::<u32>(BattleEventConfigTemplate::VT_LEVEL_DESIGN_ID, level_design_id, 0);
  }
  #[inline]
  pub fn add_desc_1(&mut self, desc_1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_DESC_1, desc_1);
  }
  #[inline]
  pub fn add_desc_2(&mut self, desc_2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_DESC_2, desc_2);
  }
  #[inline]
  pub fn add_unlock_condition(&mut self, unlock_condition: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_UNLOCK_CONDITION, unlock_condition);
  }
  #[inline]
  pub fn add_play_type(&mut self, play_type: u32) {
    self.fbb_.push_slot::<u32>(BattleEventConfigTemplate::VT_PLAY_TYPE, play_type, 0);
  }
  #[inline]
  pub fn add_unk_1(&mut self, unk_1: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_1, unk_1, 0);
  }
  #[inline]
  pub fn add_unk_2(&mut self, unk_2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_UNK_2, unk_2);
  }
  #[inline]
  pub fn add_unk_3(&mut self, unk_3: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_UNK_3, unk_3);
  }
  #[inline]
  pub fn add_unk_4(&mut self, unk_4: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_4, unk_4, 0);
  }
  #[inline]
  pub fn add_desc(&mut self, desc: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_DESC, desc);
  }
  #[inline]
  pub fn add_unk_5(&mut self, unk_5: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_5, unk_5, 0);
  }
  #[inline]
  pub fn add_unk_6(&mut self, unk_6: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_6, unk_6, 0);
  }
  #[inline]
  pub fn add_unk_7(&mut self, unk_7: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_7, unk_7, 0);
  }
  #[inline]
  pub fn add_unk_8(&mut self, unk_8: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_UNK_8, unk_8);
  }
  #[inline]
  pub fn add_unk_9(&mut self, unk_9: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_9, unk_9, 0);
  }
  #[inline]
  pub fn add_unk_10(&mut self, unk_10: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_10, unk_10, 0);
  }
  #[inline]
  pub fn add_unk_11(&mut self, unk_11: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_11, unk_11, 0);
  }
  #[inline]
  pub fn add_unk_12(&mut self, unk_12: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_UNK_12, unk_12);
  }
  #[inline]
  pub fn add_normal_drop(&mut self, normal_drop: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_NORMAL_DROP, normal_drop);
  }
  #[inline]
  pub fn add_unk_13(&mut self, unk_13: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_13, unk_13, 0);
  }
  #[inline]
  pub fn add_unk_14(&mut self, unk_14: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_14, unk_14, 0);
  }
  #[inline]
  pub fn add_unk_15(&mut self, unk_15: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_UNK_15, unk_15);
  }
  #[inline]
  pub fn add_unk_16(&mut self, unk_16: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_16, unk_16, 0);
  }
  #[inline]
  pub fn add_unk_17(&mut self, unk_17: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_17, unk_17, 0);
  }
  #[inline]
  pub fn add_unk_18(&mut self, unk_18: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_18, unk_18, 0);
  }
  #[inline]
  pub fn add_unk_19(&mut self, unk_19: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_19, unk_19, 0);
  }
  #[inline]
  pub fn add_unk_20(&mut self, unk_20: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_20, unk_20, 0);
  }
  #[inline]
  pub fn add_unk_21(&mut self, unk_21: bool) {
    self.fbb_.push_slot::<bool>(BattleEventConfigTemplate::VT_UNK_21, unk_21, false);
  }
  #[inline]
  pub fn add_unk_22(&mut self, unk_22: bool) {
    self.fbb_.push_slot::<bool>(BattleEventConfigTemplate::VT_UNK_22, unk_22, false);
  }
  #[inline]
  pub fn add_unk_23(&mut self, unk_23: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_23, unk_23, 0);
  }
  #[inline]
  pub fn add_unk_24(&mut self, unk_24: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_UNK_24, unk_24);
  }
  #[inline]
  pub fn add_unk_25(&mut self, unk_25: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_25, unk_25, 0);
  }
  #[inline]
  pub fn add_unk_26(&mut self, unk_26: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_UNK_26, unk_26);
  }
  #[inline]
  pub fn add_unk_27(&mut self, unk_27: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_UNK_27, unk_27);
  }
  #[inline]
  pub fn add_unk_28(&mut self, unk_28: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_28, unk_28, 0);
  }
  #[inline]
  pub fn add_unk_29(&mut self, unk_29: bool) {
    self.fbb_.push_slot::<bool>(BattleEventConfigTemplate::VT_UNK_29, unk_29, false);
  }
  #[inline]
  pub fn add_unk_30(&mut self, unk_30: bool) {
    self.fbb_.push_slot::<bool>(BattleEventConfigTemplate::VT_UNK_30, unk_30, false);
  }
  #[inline]
  pub fn add_unk_31(&mut self, unk_31: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_31, unk_31, 0);
  }
  #[inline]
  pub fn add_unk_32(&mut self, unk_32: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_32, unk_32, 0);
  }
  #[inline]
  pub fn add_unk_33(&mut self, unk_33: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_33, unk_33, 0);
  }
  #[inline]
  pub fn add_unk_34(&mut self, unk_34: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_34, unk_34, 0);
  }
  #[inline]
  pub fn add_unk_35(&mut self, unk_35: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_35, unk_35, 0);
  }
  #[inline]
  pub fn add_unk_36(&mut self, unk_36: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_36, unk_36, 0);
  }
  #[inline]
  pub fn add_unk_37(&mut self, unk_37: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_37, unk_37, 0);
  }
  #[inline]
  pub fn add_unk_38(&mut self, unk_38: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_38, unk_38, 0);
  }
  #[inline]
  pub fn add_unk_39(&mut self, unk_39: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_39, unk_39, 0);
  }
  #[inline]
  pub fn add_unk_40(&mut self, unk_40: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_40, unk_40, 0);
  }
  #[inline]
  pub fn add_unk_41(&mut self, unk_41: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_41, unk_41, 0);
  }
  #[inline]
  pub fn add_unk_42(&mut self, unk_42: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_42, unk_42, 0);
  }
  #[inline]
  pub fn add_unk_43(&mut self, unk_43: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_43, unk_43, 0);
  }
  #[inline]
  pub fn add_unk_44(&mut self, unk_44: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_44, unk_44, 0);
  }
  #[inline]
  pub fn add_unk_45(&mut self, unk_45: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_45, unk_45, 0);
  }
  #[inline]
  pub fn add_unk_46(&mut self, unk_46: bool) {
    self.fbb_.push_slot::<bool>(BattleEventConfigTemplate::VT_UNK_46, unk_46, false);
  }
  #[inline]
  pub fn add_unk_47(&mut self, unk_47: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_47, unk_47, 0);
  }
  #[inline]
  pub fn add_unk_48(&mut self, unk_48: bool) {
    self.fbb_.push_slot::<bool>(BattleEventConfigTemplate::VT_UNK_48, unk_48, false);
  }
  #[inline]
  pub fn add_unk_49(&mut self, unk_49: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_49, unk_49, 0);
  }
  #[inline]
  pub fn add_unk_50(&mut self, unk_50: i32) {
    self.fbb_.push_slot::<i32>(BattleEventConfigTemplate::VT_UNK_50, unk_50, 0);
  }
  #[inline]
  pub fn add_special_reward(&mut self, special_reward: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplate::VT_SPECIAL_REWARD, special_reward);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BattleEventConfigTemplateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BattleEventConfigTemplateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BattleEventConfigTemplate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BattleEventConfigTemplate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BattleEventConfigTemplate");
      ds.field("id", &self.id());
      ds.field("level_design_id", &self.level_design_id());
      ds.field("desc_1", &self.desc_1());
      ds.field("desc_2", &self.desc_2());
      ds.field("unlock_condition", &self.unlock_condition());
      ds.field("play_type", &self.play_type());
      ds.field("unk_1", &self.unk_1());
      ds.field("unk_2", &self.unk_2());
      ds.field("unk_3", &self.unk_3());
      ds.field("unk_4", &self.unk_4());
      ds.field("desc", &self.desc());
      ds.field("unk_5", &self.unk_5());
      ds.field("unk_6", &self.unk_6());
      ds.field("unk_7", &self.unk_7());
      ds.field("unk_8", &self.unk_8());
      ds.field("unk_9", &self.unk_9());
      ds.field("unk_10", &self.unk_10());
      ds.field("unk_11", &self.unk_11());
      ds.field("unk_12", &self.unk_12());
      ds.field("normal_drop", &self.normal_drop());
      ds.field("unk_13", &self.unk_13());
      ds.field("unk_14", &self.unk_14());
      ds.field("unk_15", &self.unk_15());
      ds.field("unk_16", &self.unk_16());
      ds.field("unk_17", &self.unk_17());
      ds.field("unk_18", &self.unk_18());
      ds.field("unk_19", &self.unk_19());
      ds.field("unk_20", &self.unk_20());
      ds.field("unk_21", &self.unk_21());
      ds.field("unk_22", &self.unk_22());
      ds.field("unk_23", &self.unk_23());
      ds.field("unk_24", &self.unk_24());
      ds.field("unk_25", &self.unk_25());
      ds.field("unk_26", &self.unk_26());
      ds.field("unk_27", &self.unk_27());
      ds.field("unk_28", &self.unk_28());
      ds.field("unk_29", &self.unk_29());
      ds.field("unk_30", &self.unk_30());
      ds.field("unk_31", &self.unk_31());
      ds.field("unk_32", &self.unk_32());
      ds.field("unk_33", &self.unk_33());
      ds.field("unk_34", &self.unk_34());
      ds.field("unk_35", &self.unk_35());
      ds.field("unk_36", &self.unk_36());
      ds.field("unk_37", &self.unk_37());
      ds.field("unk_38", &self.unk_38());
      ds.field("unk_39", &self.unk_39());
      ds.field("unk_40", &self.unk_40());
      ds.field("unk_41", &self.unk_41());
      ds.field("unk_42", &self.unk_42());
      ds.field("unk_43", &self.unk_43());
      ds.field("unk_44", &self.unk_44());
      ds.field("unk_45", &self.unk_45());
      ds.field("unk_46", &self.unk_46());
      ds.field("unk_47", &self.unk_47());
      ds.field("unk_48", &self.unk_48());
      ds.field("unk_49", &self.unk_49());
      ds.field("unk_50", &self.unk_50());
      ds.field("special_reward", &self.special_reward());
      ds.finish()
  }
}
pub enum BattleEventConfigTemplateTbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BattleEventConfigTemplateTb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BattleEventConfigTemplateTb<'a> {
  type Inner = BattleEventConfigTemplateTb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BattleEventConfigTemplateTb<'a> {
  pub const VT_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BattleEventConfigTemplateTb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BattleEventConfigTemplateTbArgs<'args>
  ) -> flatbuffers::WIPOffset<BattleEventConfigTemplateTb<'bldr>> {
    let mut builder = BattleEventConfigTemplateTbBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    builder.finish()
  }


  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BattleEventConfigTemplate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BattleEventConfigTemplate>>>>(BattleEventConfigTemplateTb::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for BattleEventConfigTemplateTb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<BattleEventConfigTemplate>>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct BattleEventConfigTemplateTbArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BattleEventConfigTemplate<'a>>>>>,
}
impl<'a> Default for BattleEventConfigTemplateTbArgs<'a> {
  #[inline]
  fn default() -> Self {
    BattleEventConfigTemplateTbArgs {
      data: None,
    }
  }
}

pub struct BattleEventConfigTemplateTbBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BattleEventConfigTemplateTbBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<BattleEventConfigTemplate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattleEventConfigTemplateTb::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BattleEventConfigTemplateTbBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BattleEventConfigTemplateTbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BattleEventConfigTemplateTb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BattleEventConfigTemplateTb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BattleEventConfigTemplateTb");
      ds.field("data", &self.data());
      ds.finish()
  }
}
