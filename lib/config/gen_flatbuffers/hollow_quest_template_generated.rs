// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_HOLLOW_QUEST_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_HOLLOW_QUEST_TYPE: i32 = 27;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_HOLLOW_QUEST_TYPE: [HollowQuestType; 27] = [
  HollowQuestType::Common,
  HollowQuestType::MainQuest,
  HollowQuestType::SideQuest,
  HollowQuestType::Urgent,
  HollowQuestType::UrgentSupplement,
  HollowQuestType::Challenge,
  HollowQuestType::ChallengeChaos,
  HollowQuestType::AvatarSide,
  HollowQuestType::World,
  HollowQuestType::NormalBattle,
  HollowQuestType::PromoteBattle,
  HollowQuestType::DifficutyBattle,
  HollowQuestType::RallyBattle,
  HollowQuestType::BossRushBattle,
  HollowQuestType::NestVeryHard,
  HollowQuestType::HackerActivity,
  HollowQuestType::Arpeggio,
  HollowQuestType::TheGun,
  HollowQuestType::AbyssS2_Story,
  HollowQuestType::AbyssS2_Period,
  HollowQuestType::MainQuestChessboard,
  HollowQuestType::AbyssS2_RoleChallenge,
  HollowQuestType::DreamNormal,
  HollowQuestType::DreamEndLess,
  HollowQuestType::AbyssS2_Event,
  HollowQuestType::AbyssS2_HobaPrefac,
  HollowQuestType::EnumCount,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct HollowQuestType(pub i32);
#[allow(non_upper_case_globals)]
impl HollowQuestType {
  pub const Common: Self = Self(0);
  pub const MainQuest: Self = Self(1);
  pub const SideQuest: Self = Self(2);
  pub const Urgent: Self = Self(3);
  pub const UrgentSupplement: Self = Self(4);
  pub const Challenge: Self = Self(5);
  pub const ChallengeChaos: Self = Self(6);
  pub const AvatarSide: Self = Self(7);
  pub const World: Self = Self(8);
  pub const NormalBattle: Self = Self(10);
  pub const PromoteBattle: Self = Self(11);
  pub const DifficutyBattle: Self = Self(12);
  pub const RallyBattle: Self = Self(13);
  pub const BossRushBattle: Self = Self(14);
  pub const NestVeryHard: Self = Self(15);
  pub const HackerActivity: Self = Self(16);
  pub const Arpeggio: Self = Self(17);
  pub const TheGun: Self = Self(18);
  pub const AbyssS2_Story: Self = Self(19);
  pub const AbyssS2_Period: Self = Self(20);
  pub const MainQuestChessboard: Self = Self(21);
  pub const AbyssS2_RoleChallenge: Self = Self(22);
  pub const DreamNormal: Self = Self(23);
  pub const DreamEndLess: Self = Self(24);
  pub const AbyssS2_Event: Self = Self(25);
  pub const AbyssS2_HobaPrefac: Self = Self(26);
  pub const EnumCount: Self = Self(27);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 27;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Common,
    Self::MainQuest,
    Self::SideQuest,
    Self::Urgent,
    Self::UrgentSupplement,
    Self::Challenge,
    Self::ChallengeChaos,
    Self::AvatarSide,
    Self::World,
    Self::NormalBattle,
    Self::PromoteBattle,
    Self::DifficutyBattle,
    Self::RallyBattle,
    Self::BossRushBattle,
    Self::NestVeryHard,
    Self::HackerActivity,
    Self::Arpeggio,
    Self::TheGun,
    Self::AbyssS2_Story,
    Self::AbyssS2_Period,
    Self::MainQuestChessboard,
    Self::AbyssS2_RoleChallenge,
    Self::DreamNormal,
    Self::DreamEndLess,
    Self::AbyssS2_Event,
    Self::AbyssS2_HobaPrefac,
    Self::EnumCount,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Common => Some("Common"),
      Self::MainQuest => Some("MainQuest"),
      Self::SideQuest => Some("SideQuest"),
      Self::Urgent => Some("Urgent"),
      Self::UrgentSupplement => Some("UrgentSupplement"),
      Self::Challenge => Some("Challenge"),
      Self::ChallengeChaos => Some("ChallengeChaos"),
      Self::AvatarSide => Some("AvatarSide"),
      Self::World => Some("World"),
      Self::NormalBattle => Some("NormalBattle"),
      Self::PromoteBattle => Some("PromoteBattle"),
      Self::DifficutyBattle => Some("DifficutyBattle"),
      Self::RallyBattle => Some("RallyBattle"),
      Self::BossRushBattle => Some("BossRushBattle"),
      Self::NestVeryHard => Some("NestVeryHard"),
      Self::HackerActivity => Some("HackerActivity"),
      Self::Arpeggio => Some("Arpeggio"),
      Self::TheGun => Some("TheGun"),
      Self::AbyssS2_Story => Some("AbyssS2_Story"),
      Self::AbyssS2_Period => Some("AbyssS2_Period"),
      Self::MainQuestChessboard => Some("MainQuestChessboard"),
      Self::AbyssS2_RoleChallenge => Some("AbyssS2_RoleChallenge"),
      Self::DreamNormal => Some("DreamNormal"),
      Self::DreamEndLess => Some("DreamEndLess"),
      Self::AbyssS2_Event => Some("AbyssS2_Event"),
      Self::AbyssS2_HobaPrefac => Some("AbyssS2_HobaPrefac"),
      Self::EnumCount => Some("EnumCount"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for HollowQuestType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for HollowQuestType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for HollowQuestType {
    type Output = HollowQuestType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for HollowQuestType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for HollowQuestType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for HollowQuestType {}
pub enum HollowQuestTemplateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct HollowQuestTemplate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HollowQuestTemplate<'a> {
  type Inner = HollowQuestTemplate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> HollowQuestTemplate<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_UNK_1: flatbuffers::VOffsetT = 6;
  pub const VT_CHESSBOARD_ID: flatbuffers::VOffsetT = 8;
  pub const VT_UNK_2: flatbuffers::VOffsetT = 10;
  pub const VT_HOLLOW_ID: flatbuffers::VOffsetT = 12;
  pub const VT_HOLLOW_QUEST_TYPE: flatbuffers::VOffsetT = 14;
  pub const VT_UNK_3: flatbuffers::VOffsetT = 16;
  pub const VT_DURATION: flatbuffers::VOffsetT = 18;
  pub const VT_HAS_STAMINA: flatbuffers::VOffsetT = 20;
  pub const VT_ENVIRONMENTS: flatbuffers::VOffsetT = 22;
  pub const VT_MAIN_DIFFICULTY: flatbuffers::VOffsetT = 24;
  pub const VT_DIFFICULTIES: flatbuffers::VOffsetT = 26;
  pub const VT_RECOMMENDED_ELEMENTS: flatbuffers::VOffsetT = 28;
  pub const VT_CLIENT: flatbuffers::VOffsetT = 30;
  pub const VT_UNK_4: flatbuffers::VOffsetT = 32;
  pub const VT_UNK_5: flatbuffers::VOffsetT = 34;
  pub const VT_UNK_6: flatbuffers::VOffsetT = 36;
  pub const VT_SCALE: flatbuffers::VOffsetT = 38;
  pub const VT_SHOW_TIP: flatbuffers::VOffsetT = 40;
  pub const VT_MONSTER_LEVEL: flatbuffers::VOffsetT = 42;
  pub const VT_RECOMMENDED_LEVEL: flatbuffers::VOffsetT = 44;
  pub const VT_AVERAGE_LEVEL_TIPS: flatbuffers::VOffsetT = 46;
  pub const VT_RECOMMENDED_HIT_TYPES: flatbuffers::VOffsetT = 48;
  pub const VT_UNK_7: flatbuffers::VOffsetT = 50;
  pub const VT_UNK_8: flatbuffers::VOffsetT = 52;
  pub const VT_UNK_9: flatbuffers::VOffsetT = 54;
  pub const VT_UNK_10: flatbuffers::VOffsetT = 56;
  pub const VT_UNK_11: flatbuffers::VOffsetT = 58;
  pub const VT_UNK_12: flatbuffers::VOffsetT = 60;
  pub const VT_UNK_13: flatbuffers::VOffsetT = 62;
  pub const VT_SLOT_1_AVATAR: flatbuffers::VOffsetT = 64;
  pub const VT_SLOT_2_AVATAR: flatbuffers::VOffsetT = 66;
  pub const VT_SLOT_3_AVATAR: flatbuffers::VOffsetT = 68;
  pub const VT_UNK_14: flatbuffers::VOffsetT = 70;
  pub const VT_UNK_15: flatbuffers::VOffsetT = 72;
  pub const VT_UNK_16: flatbuffers::VOffsetT = 74;
  pub const VT_UNK_17: flatbuffers::VOffsetT = 76;
  pub const VT_PREVIEW_RES_GROUP_ID: flatbuffers::VOffsetT = 78;
  pub const VT_CHESSBOARD_RES_GROUP_ID: flatbuffers::VOffsetT = 80;
  pub const VT_BGM_CHAPTER_STATE: flatbuffers::VOffsetT = 82;
  pub const VT_UNK_18: flatbuffers::VOffsetT = 84;
  pub const VT_UNK_19: flatbuffers::VOffsetT = 86;
  pub const VT_UNK_20: flatbuffers::VOffsetT = 88;
  pub const VT_UNK_21: flatbuffers::VOffsetT = 90;
  pub const VT_UNK_22: flatbuffers::VOffsetT = 92;
  pub const VT_UNK_23: flatbuffers::VOffsetT = 94;
  pub const VT_UNK_24: flatbuffers::VOffsetT = 96;
  pub const VT_UNK_25: flatbuffers::VOffsetT = 98;
  pub const VT_UNK_26: flatbuffers::VOffsetT = 100;
  pub const VT_TITLE: flatbuffers::VOffsetT = 102;
  pub const VT_DIFFICULTY: flatbuffers::VOffsetT = 104;
  pub const VT_TARGET: flatbuffers::VOffsetT = 106;
  pub const VT_UNK_27: flatbuffers::VOffsetT = 108;
  pub const VT_UNK_28: flatbuffers::VOffsetT = 110;
  pub const VT_UNK_29: flatbuffers::VOffsetT = 112;
  pub const VT_UNK_30: flatbuffers::VOffsetT = 114;
  pub const VT_UNK_31: flatbuffers::VOffsetT = 116;
  pub const VT_UNK_32: flatbuffers::VOffsetT = 118;
  pub const VT_UNK_33: flatbuffers::VOffsetT = 120;
  pub const VT_HOLLOW_ITEM_BAN_LISTS: flatbuffers::VOffsetT = 122;
  pub const VT_UNK_34: flatbuffers::VOffsetT = 124;
  pub const VT_ENEMY_TYPES: flatbuffers::VOffsetT = 126;
  pub const VT_BACKGROUND: flatbuffers::VOffsetT = 128;
  pub const VT_UNK_35: flatbuffers::VOffsetT = 130;
  pub const VT_UNK_36: flatbuffers::VOffsetT = 132;
  pub const VT_UNK_37: flatbuffers::VOffsetT = 134;
  pub const VT_UNK_38: flatbuffers::VOffsetT = 136;
  pub const VT_UNK_39: flatbuffers::VOffsetT = 138;
  pub const VT_UNK_40: flatbuffers::VOffsetT = 140;
  pub const VT_UNK_41: flatbuffers::VOffsetT = 142;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    HollowQuestTemplate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HollowQuestTemplateArgs<'args>
  ) -> flatbuffers::WIPOffset<HollowQuestTemplate<'bldr>> {
    let mut builder = HollowQuestTemplateBuilder::new(_fbb);
    builder.add_unk_41(args.unk_41);
    builder.add_unk_40(args.unk_40);
    builder.add_unk_39(args.unk_39);
    builder.add_unk_38(args.unk_38);
    if let Some(x) = args.unk_37 { builder.add_unk_37(x); }
    if let Some(x) = args.unk_36 { builder.add_unk_36(x); }
    builder.add_unk_35(args.unk_35);
    if let Some(x) = args.background { builder.add_background(x); }
    if let Some(x) = args.enemy_types { builder.add_enemy_types(x); }
    if let Some(x) = args.hollow_item_ban_lists { builder.add_hollow_item_ban_lists(x); }
    builder.add_unk_33(args.unk_33);
    builder.add_unk_31(args.unk_31);
    builder.add_unk_29(args.unk_29);
    builder.add_unk_28(args.unk_28);
    if let Some(x) = args.unk_27 { builder.add_unk_27(x); }
    if let Some(x) = args.target { builder.add_target(x); }
    if let Some(x) = args.difficulty { builder.add_difficulty(x); }
    if let Some(x) = args.title { builder.add_title(x); }
    builder.add_unk_26(args.unk_26);
    builder.add_unk_24(args.unk_24);
    builder.add_unk_23(args.unk_23);
    builder.add_unk_22(args.unk_22);
    if let Some(x) = args.unk_21 { builder.add_unk_21(x); }
    builder.add_unk_20(args.unk_20);
    if let Some(x) = args.unk_19 { builder.add_unk_19(x); }
    builder.add_unk_18(args.unk_18);
    if let Some(x) = args.bgm_chapter_state { builder.add_bgm_chapter_state(x); }
    builder.add_chessboard_res_group_id(args.chessboard_res_group_id);
    builder.add_preview_res_group_id(args.preview_res_group_id);
    builder.add_unk_17(args.unk_17);
    builder.add_unk_14(args.unk_14);
    builder.add_slot_3_avatar(args.slot_3_avatar);
    builder.add_slot_2_avatar(args.slot_2_avatar);
    builder.add_slot_1_avatar(args.slot_1_avatar);
    builder.add_unk_13(args.unk_13);
    builder.add_unk_11(args.unk_11);
    if let Some(x) = args.unk_10 { builder.add_unk_10(x); }
    if let Some(x) = args.unk_7 { builder.add_unk_7(x); }
    if let Some(x) = args.recommended_hit_types { builder.add_recommended_hit_types(x); }
    builder.add_average_level_tips(args.average_level_tips);
    builder.add_recommended_level(args.recommended_level);
    builder.add_monster_level(args.monster_level);
    builder.add_show_tip(args.show_tip);
    builder.add_scale(args.scale);
    builder.add_unk_6(args.unk_6);
    builder.add_unk_4(args.unk_4);
    if let Some(x) = args.client { builder.add_client(x); }
    if let Some(x) = args.recommended_elements { builder.add_recommended_elements(x); }
    if let Some(x) = args.difficulties { builder.add_difficulties(x); }
    if let Some(x) = args.main_difficulty { builder.add_main_difficulty(x); }
    if let Some(x) = args.environments { builder.add_environments(x); }
    if let Some(x) = args.has_stamina { builder.add_has_stamina(x); }
    if let Some(x) = args.duration { builder.add_duration(x); }
    builder.add_unk_3(args.unk_3);
    builder.add_hollow_quest_type(args.hollow_quest_type);
    builder.add_hollow_id(args.hollow_id);
    builder.add_unk_2(args.unk_2);
    builder.add_chessboard_id(args.chessboard_id);
    builder.add_unk_1(args.unk_1);
    builder.add_id(args.id);
    builder.add_unk_34(args.unk_34);
    builder.add_unk_32(args.unk_32);
    builder.add_unk_30(args.unk_30);
    builder.add_unk_25(args.unk_25);
    builder.add_unk_16(args.unk_16);
    builder.add_unk_15(args.unk_15);
    builder.add_unk_12(args.unk_12);
    builder.add_unk_9(args.unk_9);
    builder.add_unk_8(args.unk_8);
    builder.add_unk_5(args.unk_5);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(HollowQuestTemplate::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_1(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn chessboard_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(HollowQuestTemplate::VT_CHESSBOARD_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_2(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_2, Some(0)).unwrap()}
  }
  #[inline]
  pub fn hollow_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(HollowQuestTemplate::VT_HOLLOW_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn hollow_quest_type(&self) -> HollowQuestType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<HollowQuestType>(HollowQuestTemplate::VT_HOLLOW_QUEST_TYPE, Some(HollowQuestType::Common)).unwrap()}
  }
  #[inline]
  pub fn unk_3(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_3, Some(0)).unwrap()}
  }
  #[inline]
  pub fn duration(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowQuestTemplate::VT_DURATION, None)}
  }
  #[inline]
  pub fn has_stamina(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowQuestTemplate::VT_HAS_STAMINA, None)}
  }
  #[inline]
  pub fn environments(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(HollowQuestTemplate::VT_ENVIRONMENTS, None)}
  }
  #[inline]
  pub fn main_difficulty(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowQuestTemplate::VT_MAIN_DIFFICULTY, None)}
  }
  #[inline]
  pub fn difficulties(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(HollowQuestTemplate::VT_DIFFICULTIES, None)}
  }
  #[inline]
  pub fn recommended_elements(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(HollowQuestTemplate::VT_RECOMMENDED_ELEMENTS, None)}
  }
  #[inline]
  pub fn client(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowQuestTemplate::VT_CLIENT, None)}
  }
  #[inline]
  pub fn unk_4(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_4, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_5(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(HollowQuestTemplate::VT_UNK_5, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_6(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_6, Some(0)).unwrap()}
  }
  #[inline]
  pub fn scale(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_SCALE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn show_tip(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_SHOW_TIP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn monster_level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_MONSTER_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn recommended_level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_RECOMMENDED_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn average_level_tips(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_AVERAGE_LEVEL_TIPS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn recommended_hit_types(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(HollowQuestTemplate::VT_RECOMMENDED_HIT_TYPES, None)}
  }
  #[inline]
  pub fn unk_7(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(HollowQuestTemplate::VT_UNK_7, None)}
  }
  #[inline]
  pub fn unk_8(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(HollowQuestTemplate::VT_UNK_8, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_9(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(HollowQuestTemplate::VT_UNK_9, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_10(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowQuestTemplate::VT_UNK_10, None)}
  }
  #[inline]
  pub fn unk_11(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_11, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_12(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(HollowQuestTemplate::VT_UNK_12, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_13(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_13, Some(0)).unwrap()}
  }
  #[inline]
  pub fn slot_1_avatar(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_SLOT_1_AVATAR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn slot_2_avatar(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_SLOT_2_AVATAR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn slot_3_avatar(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_SLOT_3_AVATAR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_14(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_14, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_15(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(HollowQuestTemplate::VT_UNK_15, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_16(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(HollowQuestTemplate::VT_UNK_16, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_17(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_17, Some(0)).unwrap()}
  }
  #[inline]
  pub fn preview_res_group_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_PREVIEW_RES_GROUP_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn chessboard_res_group_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_CHESSBOARD_RES_GROUP_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn bgm_chapter_state(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowQuestTemplate::VT_BGM_CHAPTER_STATE, None)}
  }
  #[inline]
  pub fn unk_18(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_18, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_19(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowQuestTemplate::VT_UNK_19, None)}
  }
  #[inline]
  pub fn unk_20(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_20, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_21(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(HollowQuestTemplate::VT_UNK_21, None)}
  }
  #[inline]
  pub fn unk_22(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_22, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_23(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_23, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_24(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_24, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_25(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(HollowQuestTemplate::VT_UNK_25, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_26(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_26, Some(0)).unwrap()}
  }
  #[inline]
  pub fn title(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowQuestTemplate::VT_TITLE, None)}
  }
  #[inline]
  pub fn difficulty(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowQuestTemplate::VT_DIFFICULTY, None)}
  }
  #[inline]
  pub fn target(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowQuestTemplate::VT_TARGET, None)}
  }
  #[inline]
  pub fn unk_27(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(HollowQuestTemplate::VT_UNK_27, None)}
  }
  #[inline]
  pub fn unk_28(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_28, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_29(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_29, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_30(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(HollowQuestTemplate::VT_UNK_30, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_31(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_31, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_32(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(HollowQuestTemplate::VT_UNK_32, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_33(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_33, Some(0)).unwrap()}
  }
  #[inline]
  pub fn hollow_item_ban_lists(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(HollowQuestTemplate::VT_HOLLOW_ITEM_BAN_LISTS, None)}
  }
  #[inline]
  pub fn unk_34(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(HollowQuestTemplate::VT_UNK_34, Some(false)).unwrap()}
  }
  #[inline]
  pub fn enemy_types(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(HollowQuestTemplate::VT_ENEMY_TYPES, None)}
  }
  #[inline]
  pub fn background(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowQuestTemplate::VT_BACKGROUND, None)}
  }
  #[inline]
  pub fn unk_35(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_35, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_36(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(HollowQuestTemplate::VT_UNK_36, None)}
  }
  #[inline]
  pub fn unk_37(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(HollowQuestTemplate::VT_UNK_37, None)}
  }
  #[inline]
  pub fn unk_38(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_38, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_39(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_39, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_40(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_40, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_41(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowQuestTemplate::VT_UNK_41, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for HollowQuestTemplate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .visit_field::<i32>("unk_1", Self::VT_UNK_1, false)?
     .visit_field::<u32>("chessboard_id", Self::VT_CHESSBOARD_ID, false)?
     .visit_field::<i32>("unk_2", Self::VT_UNK_2, false)?
     .visit_field::<u32>("hollow_id", Self::VT_HOLLOW_ID, false)?
     .visit_field::<HollowQuestType>("hollow_quest_type", Self::VT_HOLLOW_QUEST_TYPE, false)?
     .visit_field::<i32>("unk_3", Self::VT_UNK_3, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("duration", Self::VT_DURATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("has_stamina", Self::VT_HAS_STAMINA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("environments", Self::VT_ENVIRONMENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("main_difficulty", Self::VT_MAIN_DIFFICULTY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("difficulties", Self::VT_DIFFICULTIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("recommended_elements", Self::VT_RECOMMENDED_ELEMENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("client", Self::VT_CLIENT, false)?
     .visit_field::<i32>("unk_4", Self::VT_UNK_4, false)?
     .visit_field::<bool>("unk_5", Self::VT_UNK_5, false)?
     .visit_field::<i32>("unk_6", Self::VT_UNK_6, false)?
     .visit_field::<i32>("scale", Self::VT_SCALE, false)?
     .visit_field::<i32>("show_tip", Self::VT_SHOW_TIP, false)?
     .visit_field::<i32>("monster_level", Self::VT_MONSTER_LEVEL, false)?
     .visit_field::<i32>("recommended_level", Self::VT_RECOMMENDED_LEVEL, false)?
     .visit_field::<i32>("average_level_tips", Self::VT_AVERAGE_LEVEL_TIPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("recommended_hit_types", Self::VT_RECOMMENDED_HIT_TYPES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_7", Self::VT_UNK_7, false)?
     .visit_field::<bool>("unk_8", Self::VT_UNK_8, false)?
     .visit_field::<bool>("unk_9", Self::VT_UNK_9, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_10", Self::VT_UNK_10, false)?
     .visit_field::<i32>("unk_11", Self::VT_UNK_11, false)?
     .visit_field::<bool>("unk_12", Self::VT_UNK_12, false)?
     .visit_field::<i32>("unk_13", Self::VT_UNK_13, false)?
     .visit_field::<i32>("slot_1_avatar", Self::VT_SLOT_1_AVATAR, false)?
     .visit_field::<i32>("slot_2_avatar", Self::VT_SLOT_2_AVATAR, false)?
     .visit_field::<i32>("slot_3_avatar", Self::VT_SLOT_3_AVATAR, false)?
     .visit_field::<i32>("unk_14", Self::VT_UNK_14, false)?
     .visit_field::<bool>("unk_15", Self::VT_UNK_15, false)?
     .visit_field::<bool>("unk_16", Self::VT_UNK_16, false)?
     .visit_field::<i32>("unk_17", Self::VT_UNK_17, false)?
     .visit_field::<i32>("preview_res_group_id", Self::VT_PREVIEW_RES_GROUP_ID, false)?
     .visit_field::<i32>("chessboard_res_group_id", Self::VT_CHESSBOARD_RES_GROUP_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("bgm_chapter_state", Self::VT_BGM_CHAPTER_STATE, false)?
     .visit_field::<i32>("unk_18", Self::VT_UNK_18, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_19", Self::VT_UNK_19, false)?
     .visit_field::<i32>("unk_20", Self::VT_UNK_20, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_21", Self::VT_UNK_21, false)?
     .visit_field::<i32>("unk_22", Self::VT_UNK_22, false)?
     .visit_field::<i32>("unk_23", Self::VT_UNK_23, false)?
     .visit_field::<i32>("unk_24", Self::VT_UNK_24, false)?
     .visit_field::<bool>("unk_25", Self::VT_UNK_25, false)?
     .visit_field::<i32>("unk_26", Self::VT_UNK_26, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("title", Self::VT_TITLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("difficulty", Self::VT_DIFFICULTY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("target", Self::VT_TARGET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("unk_27", Self::VT_UNK_27, false)?
     .visit_field::<i32>("unk_28", Self::VT_UNK_28, false)?
     .visit_field::<i32>("unk_29", Self::VT_UNK_29, false)?
     .visit_field::<bool>("unk_30", Self::VT_UNK_30, false)?
     .visit_field::<i32>("unk_31", Self::VT_UNK_31, false)?
     .visit_field::<bool>("unk_32", Self::VT_UNK_32, false)?
     .visit_field::<i32>("unk_33", Self::VT_UNK_33, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("hollow_item_ban_lists", Self::VT_HOLLOW_ITEM_BAN_LISTS, false)?
     .visit_field::<bool>("unk_34", Self::VT_UNK_34, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("enemy_types", Self::VT_ENEMY_TYPES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("background", Self::VT_BACKGROUND, false)?
     .visit_field::<i32>("unk_35", Self::VT_UNK_35, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_36", Self::VT_UNK_36, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_37", Self::VT_UNK_37, false)?
     .visit_field::<i32>("unk_38", Self::VT_UNK_38, false)?
     .visit_field::<i32>("unk_39", Self::VT_UNK_39, false)?
     .visit_field::<i32>("unk_40", Self::VT_UNK_40, false)?
     .visit_field::<i32>("unk_41", Self::VT_UNK_41, false)?
     .finish();
    Ok(())
  }
}
pub struct HollowQuestTemplateArgs<'a> {
    pub id: u32,
    pub unk_1: i32,
    pub chessboard_id: u32,
    pub unk_2: i32,
    pub hollow_id: u32,
    pub hollow_quest_type: HollowQuestType,
    pub unk_3: i32,
    pub duration: Option<flatbuffers::WIPOffset<&'a str>>,
    pub has_stamina: Option<flatbuffers::WIPOffset<&'a str>>,
    pub environments: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub main_difficulty: Option<flatbuffers::WIPOffset<&'a str>>,
    pub difficulties: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub recommended_elements: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub client: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_4: i32,
    pub unk_5: bool,
    pub unk_6: i32,
    pub scale: i32,
    pub show_tip: i32,
    pub monster_level: i32,
    pub recommended_level: i32,
    pub average_level_tips: i32,
    pub recommended_hit_types: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_7: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_8: bool,
    pub unk_9: bool,
    pub unk_10: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_11: i32,
    pub unk_12: bool,
    pub unk_13: i32,
    pub slot_1_avatar: i32,
    pub slot_2_avatar: i32,
    pub slot_3_avatar: i32,
    pub unk_14: i32,
    pub unk_15: bool,
    pub unk_16: bool,
    pub unk_17: i32,
    pub preview_res_group_id: i32,
    pub chessboard_res_group_id: i32,
    pub bgm_chapter_state: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_18: i32,
    pub unk_19: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_20: i32,
    pub unk_21: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_22: i32,
    pub unk_23: i32,
    pub unk_24: i32,
    pub unk_25: bool,
    pub unk_26: i32,
    pub title: Option<flatbuffers::WIPOffset<&'a str>>,
    pub difficulty: Option<flatbuffers::WIPOffset<&'a str>>,
    pub target: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_27: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub unk_28: i32,
    pub unk_29: i32,
    pub unk_30: bool,
    pub unk_31: i32,
    pub unk_32: bool,
    pub unk_33: i32,
    pub hollow_item_ban_lists: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_34: bool,
    pub enemy_types: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub background: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_35: i32,
    pub unk_36: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_37: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_38: i32,
    pub unk_39: i32,
    pub unk_40: i32,
    pub unk_41: i32,
}
impl<'a> Default for HollowQuestTemplateArgs<'a> {
  #[inline]
  fn default() -> Self {
    HollowQuestTemplateArgs {
      id: 0,
      unk_1: 0,
      chessboard_id: 0,
      unk_2: 0,
      hollow_id: 0,
      hollow_quest_type: HollowQuestType::Common,
      unk_3: 0,
      duration: None,
      has_stamina: None,
      environments: None,
      main_difficulty: None,
      difficulties: None,
      recommended_elements: None,
      client: None,
      unk_4: 0,
      unk_5: false,
      unk_6: 0,
      scale: 0,
      show_tip: 0,
      monster_level: 0,
      recommended_level: 0,
      average_level_tips: 0,
      recommended_hit_types: None,
      unk_7: None,
      unk_8: false,
      unk_9: false,
      unk_10: None,
      unk_11: 0,
      unk_12: false,
      unk_13: 0,
      slot_1_avatar: 0,
      slot_2_avatar: 0,
      slot_3_avatar: 0,
      unk_14: 0,
      unk_15: false,
      unk_16: false,
      unk_17: 0,
      preview_res_group_id: 0,
      chessboard_res_group_id: 0,
      bgm_chapter_state: None,
      unk_18: 0,
      unk_19: None,
      unk_20: 0,
      unk_21: None,
      unk_22: 0,
      unk_23: 0,
      unk_24: 0,
      unk_25: false,
      unk_26: 0,
      title: None,
      difficulty: None,
      target: None,
      unk_27: None,
      unk_28: 0,
      unk_29: 0,
      unk_30: false,
      unk_31: 0,
      unk_32: false,
      unk_33: 0,
      hollow_item_ban_lists: None,
      unk_34: false,
      enemy_types: None,
      background: None,
      unk_35: 0,
      unk_36: None,
      unk_37: None,
      unk_38: 0,
      unk_39: 0,
      unk_40: 0,
      unk_41: 0,
    }
  }
}

pub struct HollowQuestTemplateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HollowQuestTemplateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(HollowQuestTemplate::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_unk_1(&mut self, unk_1: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_1, unk_1, 0);
  }
  #[inline]
  pub fn add_chessboard_id(&mut self, chessboard_id: u32) {
    self.fbb_.push_slot::<u32>(HollowQuestTemplate::VT_CHESSBOARD_ID, chessboard_id, 0);
  }
  #[inline]
  pub fn add_unk_2(&mut self, unk_2: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_2, unk_2, 0);
  }
  #[inline]
  pub fn add_hollow_id(&mut self, hollow_id: u32) {
    self.fbb_.push_slot::<u32>(HollowQuestTemplate::VT_HOLLOW_ID, hollow_id, 0);
  }
  #[inline]
  pub fn add_hollow_quest_type(&mut self, hollow_quest_type: HollowQuestType) {
    self.fbb_.push_slot::<HollowQuestType>(HollowQuestTemplate::VT_HOLLOW_QUEST_TYPE, hollow_quest_type, HollowQuestType::Common);
  }
  #[inline]
  pub fn add_unk_3(&mut self, unk_3: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_3, unk_3, 0);
  }
  #[inline]
  pub fn add_duration(&mut self, duration: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_DURATION, duration);
  }
  #[inline]
  pub fn add_has_stamina(&mut self, has_stamina: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_HAS_STAMINA, has_stamina);
  }
  #[inline]
  pub fn add_environments(&mut self, environments: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_ENVIRONMENTS, environments);
  }
  #[inline]
  pub fn add_main_difficulty(&mut self, main_difficulty: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_MAIN_DIFFICULTY, main_difficulty);
  }
  #[inline]
  pub fn add_difficulties(&mut self, difficulties: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_DIFFICULTIES, difficulties);
  }
  #[inline]
  pub fn add_recommended_elements(&mut self, recommended_elements: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_RECOMMENDED_ELEMENTS, recommended_elements);
  }
  #[inline]
  pub fn add_client(&mut self, client: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_CLIENT, client);
  }
  #[inline]
  pub fn add_unk_4(&mut self, unk_4: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_4, unk_4, 0);
  }
  #[inline]
  pub fn add_unk_5(&mut self, unk_5: bool) {
    self.fbb_.push_slot::<bool>(HollowQuestTemplate::VT_UNK_5, unk_5, false);
  }
  #[inline]
  pub fn add_unk_6(&mut self, unk_6: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_6, unk_6, 0);
  }
  #[inline]
  pub fn add_scale(&mut self, scale: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_SCALE, scale, 0);
  }
  #[inline]
  pub fn add_show_tip(&mut self, show_tip: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_SHOW_TIP, show_tip, 0);
  }
  #[inline]
  pub fn add_monster_level(&mut self, monster_level: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_MONSTER_LEVEL, monster_level, 0);
  }
  #[inline]
  pub fn add_recommended_level(&mut self, recommended_level: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_RECOMMENDED_LEVEL, recommended_level, 0);
  }
  #[inline]
  pub fn add_average_level_tips(&mut self, average_level_tips: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_AVERAGE_LEVEL_TIPS, average_level_tips, 0);
  }
  #[inline]
  pub fn add_recommended_hit_types(&mut self, recommended_hit_types: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_RECOMMENDED_HIT_TYPES, recommended_hit_types);
  }
  #[inline]
  pub fn add_unk_7(&mut self, unk_7: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_UNK_7, unk_7);
  }
  #[inline]
  pub fn add_unk_8(&mut self, unk_8: bool) {
    self.fbb_.push_slot::<bool>(HollowQuestTemplate::VT_UNK_8, unk_8, false);
  }
  #[inline]
  pub fn add_unk_9(&mut self, unk_9: bool) {
    self.fbb_.push_slot::<bool>(HollowQuestTemplate::VT_UNK_9, unk_9, false);
  }
  #[inline]
  pub fn add_unk_10(&mut self, unk_10: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_UNK_10, unk_10);
  }
  #[inline]
  pub fn add_unk_11(&mut self, unk_11: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_11, unk_11, 0);
  }
  #[inline]
  pub fn add_unk_12(&mut self, unk_12: bool) {
    self.fbb_.push_slot::<bool>(HollowQuestTemplate::VT_UNK_12, unk_12, false);
  }
  #[inline]
  pub fn add_unk_13(&mut self, unk_13: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_13, unk_13, 0);
  }
  #[inline]
  pub fn add_slot_1_avatar(&mut self, slot_1_avatar: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_SLOT_1_AVATAR, slot_1_avatar, 0);
  }
  #[inline]
  pub fn add_slot_2_avatar(&mut self, slot_2_avatar: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_SLOT_2_AVATAR, slot_2_avatar, 0);
  }
  #[inline]
  pub fn add_slot_3_avatar(&mut self, slot_3_avatar: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_SLOT_3_AVATAR, slot_3_avatar, 0);
  }
  #[inline]
  pub fn add_unk_14(&mut self, unk_14: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_14, unk_14, 0);
  }
  #[inline]
  pub fn add_unk_15(&mut self, unk_15: bool) {
    self.fbb_.push_slot::<bool>(HollowQuestTemplate::VT_UNK_15, unk_15, false);
  }
  #[inline]
  pub fn add_unk_16(&mut self, unk_16: bool) {
    self.fbb_.push_slot::<bool>(HollowQuestTemplate::VT_UNK_16, unk_16, false);
  }
  #[inline]
  pub fn add_unk_17(&mut self, unk_17: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_17, unk_17, 0);
  }
  #[inline]
  pub fn add_preview_res_group_id(&mut self, preview_res_group_id: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_PREVIEW_RES_GROUP_ID, preview_res_group_id, 0);
  }
  #[inline]
  pub fn add_chessboard_res_group_id(&mut self, chessboard_res_group_id: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_CHESSBOARD_RES_GROUP_ID, chessboard_res_group_id, 0);
  }
  #[inline]
  pub fn add_bgm_chapter_state(&mut self, bgm_chapter_state: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_BGM_CHAPTER_STATE, bgm_chapter_state);
  }
  #[inline]
  pub fn add_unk_18(&mut self, unk_18: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_18, unk_18, 0);
  }
  #[inline]
  pub fn add_unk_19(&mut self, unk_19: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_UNK_19, unk_19);
  }
  #[inline]
  pub fn add_unk_20(&mut self, unk_20: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_20, unk_20, 0);
  }
  #[inline]
  pub fn add_unk_21(&mut self, unk_21: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_UNK_21, unk_21);
  }
  #[inline]
  pub fn add_unk_22(&mut self, unk_22: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_22, unk_22, 0);
  }
  #[inline]
  pub fn add_unk_23(&mut self, unk_23: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_23, unk_23, 0);
  }
  #[inline]
  pub fn add_unk_24(&mut self, unk_24: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_24, unk_24, 0);
  }
  #[inline]
  pub fn add_unk_25(&mut self, unk_25: bool) {
    self.fbb_.push_slot::<bool>(HollowQuestTemplate::VT_UNK_25, unk_25, false);
  }
  #[inline]
  pub fn add_unk_26(&mut self, unk_26: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_26, unk_26, 0);
  }
  #[inline]
  pub fn add_title(&mut self, title: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_TITLE, title);
  }
  #[inline]
  pub fn add_difficulty(&mut self, difficulty: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_DIFFICULTY, difficulty);
  }
  #[inline]
  pub fn add_target(&mut self, target: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_TARGET, target);
  }
  #[inline]
  pub fn add_unk_27(&mut self, unk_27: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_UNK_27, unk_27);
  }
  #[inline]
  pub fn add_unk_28(&mut self, unk_28: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_28, unk_28, 0);
  }
  #[inline]
  pub fn add_unk_29(&mut self, unk_29: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_29, unk_29, 0);
  }
  #[inline]
  pub fn add_unk_30(&mut self, unk_30: bool) {
    self.fbb_.push_slot::<bool>(HollowQuestTemplate::VT_UNK_30, unk_30, false);
  }
  #[inline]
  pub fn add_unk_31(&mut self, unk_31: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_31, unk_31, 0);
  }
  #[inline]
  pub fn add_unk_32(&mut self, unk_32: bool) {
    self.fbb_.push_slot::<bool>(HollowQuestTemplate::VT_UNK_32, unk_32, false);
  }
  #[inline]
  pub fn add_unk_33(&mut self, unk_33: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_33, unk_33, 0);
  }
  #[inline]
  pub fn add_hollow_item_ban_lists(&mut self, hollow_item_ban_lists: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_HOLLOW_ITEM_BAN_LISTS, hollow_item_ban_lists);
  }
  #[inline]
  pub fn add_unk_34(&mut self, unk_34: bool) {
    self.fbb_.push_slot::<bool>(HollowQuestTemplate::VT_UNK_34, unk_34, false);
  }
  #[inline]
  pub fn add_enemy_types(&mut self, enemy_types: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_ENEMY_TYPES, enemy_types);
  }
  #[inline]
  pub fn add_background(&mut self, background: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_BACKGROUND, background);
  }
  #[inline]
  pub fn add_unk_35(&mut self, unk_35: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_35, unk_35, 0);
  }
  #[inline]
  pub fn add_unk_36(&mut self, unk_36: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_UNK_36, unk_36);
  }
  #[inline]
  pub fn add_unk_37(&mut self, unk_37: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplate::VT_UNK_37, unk_37);
  }
  #[inline]
  pub fn add_unk_38(&mut self, unk_38: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_38, unk_38, 0);
  }
  #[inline]
  pub fn add_unk_39(&mut self, unk_39: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_39, unk_39, 0);
  }
  #[inline]
  pub fn add_unk_40(&mut self, unk_40: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_40, unk_40, 0);
  }
  #[inline]
  pub fn add_unk_41(&mut self, unk_41: i32) {
    self.fbb_.push_slot::<i32>(HollowQuestTemplate::VT_UNK_41, unk_41, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HollowQuestTemplateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HollowQuestTemplateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HollowQuestTemplate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for HollowQuestTemplate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("HollowQuestTemplate");
      ds.field("id", &self.id());
      ds.field("unk_1", &self.unk_1());
      ds.field("chessboard_id", &self.chessboard_id());
      ds.field("unk_2", &self.unk_2());
      ds.field("hollow_id", &self.hollow_id());
      ds.field("hollow_quest_type", &self.hollow_quest_type());
      ds.field("unk_3", &self.unk_3());
      ds.field("duration", &self.duration());
      ds.field("has_stamina", &self.has_stamina());
      ds.field("environments", &self.environments());
      ds.field("main_difficulty", &self.main_difficulty());
      ds.field("difficulties", &self.difficulties());
      ds.field("recommended_elements", &self.recommended_elements());
      ds.field("client", &self.client());
      ds.field("unk_4", &self.unk_4());
      ds.field("unk_5", &self.unk_5());
      ds.field("unk_6", &self.unk_6());
      ds.field("scale", &self.scale());
      ds.field("show_tip", &self.show_tip());
      ds.field("monster_level", &self.monster_level());
      ds.field("recommended_level", &self.recommended_level());
      ds.field("average_level_tips", &self.average_level_tips());
      ds.field("recommended_hit_types", &self.recommended_hit_types());
      ds.field("unk_7", &self.unk_7());
      ds.field("unk_8", &self.unk_8());
      ds.field("unk_9", &self.unk_9());
      ds.field("unk_10", &self.unk_10());
      ds.field("unk_11", &self.unk_11());
      ds.field("unk_12", &self.unk_12());
      ds.field("unk_13", &self.unk_13());
      ds.field("slot_1_avatar", &self.slot_1_avatar());
      ds.field("slot_2_avatar", &self.slot_2_avatar());
      ds.field("slot_3_avatar", &self.slot_3_avatar());
      ds.field("unk_14", &self.unk_14());
      ds.field("unk_15", &self.unk_15());
      ds.field("unk_16", &self.unk_16());
      ds.field("unk_17", &self.unk_17());
      ds.field("preview_res_group_id", &self.preview_res_group_id());
      ds.field("chessboard_res_group_id", &self.chessboard_res_group_id());
      ds.field("bgm_chapter_state", &self.bgm_chapter_state());
      ds.field("unk_18", &self.unk_18());
      ds.field("unk_19", &self.unk_19());
      ds.field("unk_20", &self.unk_20());
      ds.field("unk_21", &self.unk_21());
      ds.field("unk_22", &self.unk_22());
      ds.field("unk_23", &self.unk_23());
      ds.field("unk_24", &self.unk_24());
      ds.field("unk_25", &self.unk_25());
      ds.field("unk_26", &self.unk_26());
      ds.field("title", &self.title());
      ds.field("difficulty", &self.difficulty());
      ds.field("target", &self.target());
      ds.field("unk_27", &self.unk_27());
      ds.field("unk_28", &self.unk_28());
      ds.field("unk_29", &self.unk_29());
      ds.field("unk_30", &self.unk_30());
      ds.field("unk_31", &self.unk_31());
      ds.field("unk_32", &self.unk_32());
      ds.field("unk_33", &self.unk_33());
      ds.field("hollow_item_ban_lists", &self.hollow_item_ban_lists());
      ds.field("unk_34", &self.unk_34());
      ds.field("enemy_types", &self.enemy_types());
      ds.field("background", &self.background());
      ds.field("unk_35", &self.unk_35());
      ds.field("unk_36", &self.unk_36());
      ds.field("unk_37", &self.unk_37());
      ds.field("unk_38", &self.unk_38());
      ds.field("unk_39", &self.unk_39());
      ds.field("unk_40", &self.unk_40());
      ds.field("unk_41", &self.unk_41());
      ds.finish()
  }
}
pub enum HollowQuestTemplateTbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct HollowQuestTemplateTb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HollowQuestTemplateTb<'a> {
  type Inner = HollowQuestTemplateTb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> HollowQuestTemplateTb<'a> {
  pub const VT_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    HollowQuestTemplateTb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HollowQuestTemplateTbArgs<'args>
  ) -> flatbuffers::WIPOffset<HollowQuestTemplateTb<'bldr>> {
    let mut builder = HollowQuestTemplateTbBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    builder.finish()
  }


  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HollowQuestTemplate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HollowQuestTemplate>>>>(HollowQuestTemplateTb::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for HollowQuestTemplateTb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<HollowQuestTemplate>>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct HollowQuestTemplateTbArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HollowQuestTemplate<'a>>>>>,
}
impl<'a> Default for HollowQuestTemplateTbArgs<'a> {
  #[inline]
  fn default() -> Self {
    HollowQuestTemplateTbArgs {
      data: None,
    }
  }
}

pub struct HollowQuestTemplateTbBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HollowQuestTemplateTbBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<HollowQuestTemplate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowQuestTemplateTb::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HollowQuestTemplateTbBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HollowQuestTemplateTbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HollowQuestTemplateTb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for HollowQuestTemplateTb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("HollowQuestTemplateTb");
      ds.field("data", &self.data());
      ds.finish()
  }
}
