// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum UnlockConfigTemplateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UnlockConfigTemplate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UnlockConfigTemplate<'a> {
  type Inner = UnlockConfigTemplate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> UnlockConfigTemplate<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_UNK_1: flatbuffers::VOffsetT = 6;
  pub const VT_UNK_2: flatbuffers::VOffsetT = 8;
  pub const VT_UNK_3: flatbuffers::VOffsetT = 10;
  pub const VT_UNK_4: flatbuffers::VOffsetT = 12;
  pub const VT_UNK_5: flatbuffers::VOffsetT = 14;
  pub const VT_UNK_6: flatbuffers::VOffsetT = 16;
  pub const VT_UNK_7: flatbuffers::VOffsetT = 18;
  pub const VT_UNK_8: flatbuffers::VOffsetT = 20;
  pub const VT_ICON_RES: flatbuffers::VOffsetT = 22;
  pub const VT_UNK_9: flatbuffers::VOffsetT = 24;
  pub const VT_NAME: flatbuffers::VOffsetT = 26;
  pub const VT_UNK_10: flatbuffers::VOffsetT = 28;
  pub const VT_UNK_11: flatbuffers::VOffsetT = 30;
  pub const VT_UNK_12: flatbuffers::VOffsetT = 32;
  pub const VT_UNK_13: flatbuffers::VOffsetT = 34;
  pub const VT_UNK_14: flatbuffers::VOffsetT = 36;
  pub const VT_UNK_15: flatbuffers::VOffsetT = 38;
  pub const VT_UNK_16: flatbuffers::VOffsetT = 40;
  pub const VT_UNK_17: flatbuffers::VOffsetT = 42;
  pub const VT_UNK_18: flatbuffers::VOffsetT = 44;
  pub const VT_UNK_19: flatbuffers::VOffsetT = 46;
  pub const VT_UNK_20: flatbuffers::VOffsetT = 48;
  pub const VT_UNK_21: flatbuffers::VOffsetT = 50;
  pub const VT_UNK_22: flatbuffers::VOffsetT = 52;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    UnlockConfigTemplate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args UnlockConfigTemplateArgs<'args>
  ) -> flatbuffers::WIPOffset<UnlockConfigTemplate<'bldr>> {
    let mut builder = UnlockConfigTemplateBuilder::new(_fbb);
    if let Some(x) = args.unk_22 { builder.add_unk_22(x); }
    builder.add_unk_21(args.unk_21);
    if let Some(x) = args.unk_20 { builder.add_unk_20(x); }
    builder.add_unk_19(args.unk_19);
    builder.add_unk_18(args.unk_18);
    if let Some(x) = args.unk_17 { builder.add_unk_17(x); }
    builder.add_unk_16(args.unk_16);
    if let Some(x) = args.unk_15 { builder.add_unk_15(x); }
    builder.add_unk_14(args.unk_14);
    builder.add_unk_12(args.unk_12);
    builder.add_unk_11(args.unk_11);
    if let Some(x) = args.unk_10 { builder.add_unk_10(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_unk_9(args.unk_9);
    if let Some(x) = args.icon_res { builder.add_icon_res(x); }
    if let Some(x) = args.unk_8 { builder.add_unk_8(x); }
    builder.add_unk_7(args.unk_7);
    if let Some(x) = args.unk_6 { builder.add_unk_6(x); }
    builder.add_unk_5(args.unk_5);
    builder.add_unk_4(args.unk_4);
    builder.add_unk_3(args.unk_3);
    if let Some(x) = args.unk_2 { builder.add_unk_2(x); }
    if let Some(x) = args.unk_1 { builder.add_unk_1(x); }
    builder.add_id(args.id);
    builder.add_unk_13(args.unk_13);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UnlockConfigTemplate::VT_UNK_1, None)}
  }
  #[inline]
  pub fn unk_2(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(UnlockConfigTemplate::VT_UNK_2, None)}
  }
  #[inline]
  pub fn unk_3(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_3, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_4(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_4, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_5(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_5, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_6(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UnlockConfigTemplate::VT_UNK_6, None)}
  }
  #[inline]
  pub fn unk_7(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_7, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_8(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UnlockConfigTemplate::VT_UNK_8, None)}
  }
  #[inline]
  pub fn icon_res(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UnlockConfigTemplate::VT_ICON_RES, None)}
  }
  #[inline]
  pub fn unk_9(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_9, Some(0)).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UnlockConfigTemplate::VT_NAME, None)}
  }
  #[inline]
  pub fn unk_10(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UnlockConfigTemplate::VT_UNK_10, None)}
  }
  #[inline]
  pub fn unk_11(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_11, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_12(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_12, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_13(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(UnlockConfigTemplate::VT_UNK_13, Some(false)).unwrap()}
  }
  #[inline]
  pub fn unk_14(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_14, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_15(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UnlockConfigTemplate::VT_UNK_15, None)}
  }
  #[inline]
  pub fn unk_16(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_16, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_17(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UnlockConfigTemplate::VT_UNK_17, None)}
  }
  #[inline]
  pub fn unk_18(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_18, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_19(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_19, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_20(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UnlockConfigTemplate::VT_UNK_20, None)}
  }
  #[inline]
  pub fn unk_21(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnlockConfigTemplate::VT_UNK_21, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_22(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UnlockConfigTemplate::VT_UNK_22, None)}
  }
}

impl flatbuffers::Verifiable for UnlockConfigTemplate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_1", Self::VT_UNK_1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_2", Self::VT_UNK_2, false)?
     .visit_field::<i32>("unk_3", Self::VT_UNK_3, false)?
     .visit_field::<i32>("unk_4", Self::VT_UNK_4, false)?
     .visit_field::<i32>("unk_5", Self::VT_UNK_5, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_6", Self::VT_UNK_6, false)?
     .visit_field::<i32>("unk_7", Self::VT_UNK_7, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_8", Self::VT_UNK_8, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("icon_res", Self::VT_ICON_RES, false)?
     .visit_field::<i32>("unk_9", Self::VT_UNK_9, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_10", Self::VT_UNK_10, false)?
     .visit_field::<i32>("unk_11", Self::VT_UNK_11, false)?
     .visit_field::<i32>("unk_12", Self::VT_UNK_12, false)?
     .visit_field::<bool>("unk_13", Self::VT_UNK_13, false)?
     .visit_field::<i32>("unk_14", Self::VT_UNK_14, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_15", Self::VT_UNK_15, false)?
     .visit_field::<i32>("unk_16", Self::VT_UNK_16, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_17", Self::VT_UNK_17, false)?
     .visit_field::<i32>("unk_18", Self::VT_UNK_18, false)?
     .visit_field::<i32>("unk_19", Self::VT_UNK_19, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_20", Self::VT_UNK_20, false)?
     .visit_field::<i32>("unk_21", Self::VT_UNK_21, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_22", Self::VT_UNK_22, false)?
     .finish();
    Ok(())
  }
}
pub struct UnlockConfigTemplateArgs<'a> {
    pub id: i32,
    pub unk_1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_2: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_3: i32,
    pub unk_4: i32,
    pub unk_5: i32,
    pub unk_6: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_7: i32,
    pub unk_8: Option<flatbuffers::WIPOffset<&'a str>>,
    pub icon_res: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_9: i32,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_10: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_11: i32,
    pub unk_12: i32,
    pub unk_13: bool,
    pub unk_14: i32,
    pub unk_15: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_16: i32,
    pub unk_17: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_18: i32,
    pub unk_19: i32,
    pub unk_20: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_21: i32,
    pub unk_22: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for UnlockConfigTemplateArgs<'a> {
  #[inline]
  fn default() -> Self {
    UnlockConfigTemplateArgs {
      id: 0,
      unk_1: None,
      unk_2: None,
      unk_3: 0,
      unk_4: 0,
      unk_5: 0,
      unk_6: None,
      unk_7: 0,
      unk_8: None,
      icon_res: None,
      unk_9: 0,
      name: None,
      unk_10: None,
      unk_11: 0,
      unk_12: 0,
      unk_13: false,
      unk_14: 0,
      unk_15: None,
      unk_16: 0,
      unk_17: None,
      unk_18: 0,
      unk_19: 0,
      unk_20: None,
      unk_21: 0,
      unk_22: None,
    }
  }
}

pub struct UnlockConfigTemplateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> UnlockConfigTemplateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_unk_1(&mut self, unk_1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplate::VT_UNK_1, unk_1);
  }
  #[inline]
  pub fn add_unk_2(&mut self, unk_2: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplate::VT_UNK_2, unk_2);
  }
  #[inline]
  pub fn add_unk_3(&mut self, unk_3: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_3, unk_3, 0);
  }
  #[inline]
  pub fn add_unk_4(&mut self, unk_4: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_4, unk_4, 0);
  }
  #[inline]
  pub fn add_unk_5(&mut self, unk_5: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_5, unk_5, 0);
  }
  #[inline]
  pub fn add_unk_6(&mut self, unk_6: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplate::VT_UNK_6, unk_6);
  }
  #[inline]
  pub fn add_unk_7(&mut self, unk_7: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_7, unk_7, 0);
  }
  #[inline]
  pub fn add_unk_8(&mut self, unk_8: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplate::VT_UNK_8, unk_8);
  }
  #[inline]
  pub fn add_icon_res(&mut self, icon_res: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplate::VT_ICON_RES, icon_res);
  }
  #[inline]
  pub fn add_unk_9(&mut self, unk_9: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_9, unk_9, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplate::VT_NAME, name);
  }
  #[inline]
  pub fn add_unk_10(&mut self, unk_10: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplate::VT_UNK_10, unk_10);
  }
  #[inline]
  pub fn add_unk_11(&mut self, unk_11: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_11, unk_11, 0);
  }
  #[inline]
  pub fn add_unk_12(&mut self, unk_12: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_12, unk_12, 0);
  }
  #[inline]
  pub fn add_unk_13(&mut self, unk_13: bool) {
    self.fbb_.push_slot::<bool>(UnlockConfigTemplate::VT_UNK_13, unk_13, false);
  }
  #[inline]
  pub fn add_unk_14(&mut self, unk_14: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_14, unk_14, 0);
  }
  #[inline]
  pub fn add_unk_15(&mut self, unk_15: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplate::VT_UNK_15, unk_15);
  }
  #[inline]
  pub fn add_unk_16(&mut self, unk_16: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_16, unk_16, 0);
  }
  #[inline]
  pub fn add_unk_17(&mut self, unk_17: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplate::VT_UNK_17, unk_17);
  }
  #[inline]
  pub fn add_unk_18(&mut self, unk_18: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_18, unk_18, 0);
  }
  #[inline]
  pub fn add_unk_19(&mut self, unk_19: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_19, unk_19, 0);
  }
  #[inline]
  pub fn add_unk_20(&mut self, unk_20: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplate::VT_UNK_20, unk_20);
  }
  #[inline]
  pub fn add_unk_21(&mut self, unk_21: i32) {
    self.fbb_.push_slot::<i32>(UnlockConfigTemplate::VT_UNK_21, unk_21, 0);
  }
  #[inline]
  pub fn add_unk_22(&mut self, unk_22: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplate::VT_UNK_22, unk_22);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> UnlockConfigTemplateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    UnlockConfigTemplateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UnlockConfigTemplate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for UnlockConfigTemplate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("UnlockConfigTemplate");
      ds.field("id", &self.id());
      ds.field("unk_1", &self.unk_1());
      ds.field("unk_2", &self.unk_2());
      ds.field("unk_3", &self.unk_3());
      ds.field("unk_4", &self.unk_4());
      ds.field("unk_5", &self.unk_5());
      ds.field("unk_6", &self.unk_6());
      ds.field("unk_7", &self.unk_7());
      ds.field("unk_8", &self.unk_8());
      ds.field("icon_res", &self.icon_res());
      ds.field("unk_9", &self.unk_9());
      ds.field("name", &self.name());
      ds.field("unk_10", &self.unk_10());
      ds.field("unk_11", &self.unk_11());
      ds.field("unk_12", &self.unk_12());
      ds.field("unk_13", &self.unk_13());
      ds.field("unk_14", &self.unk_14());
      ds.field("unk_15", &self.unk_15());
      ds.field("unk_16", &self.unk_16());
      ds.field("unk_17", &self.unk_17());
      ds.field("unk_18", &self.unk_18());
      ds.field("unk_19", &self.unk_19());
      ds.field("unk_20", &self.unk_20());
      ds.field("unk_21", &self.unk_21());
      ds.field("unk_22", &self.unk_22());
      ds.finish()
  }
}
pub enum UnlockConfigTemplateTbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UnlockConfigTemplateTb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UnlockConfigTemplateTb<'a> {
  type Inner = UnlockConfigTemplateTb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> UnlockConfigTemplateTb<'a> {
  pub const VT_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    UnlockConfigTemplateTb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args UnlockConfigTemplateTbArgs<'args>
  ) -> flatbuffers::WIPOffset<UnlockConfigTemplateTb<'bldr>> {
    let mut builder = UnlockConfigTemplateTbBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    builder.finish()
  }


  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<UnlockConfigTemplate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<UnlockConfigTemplate>>>>(UnlockConfigTemplateTb::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for UnlockConfigTemplateTb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<UnlockConfigTemplate>>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct UnlockConfigTemplateTbArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<UnlockConfigTemplate<'a>>>>>,
}
impl<'a> Default for UnlockConfigTemplateTbArgs<'a> {
  #[inline]
  fn default() -> Self {
    UnlockConfigTemplateTbArgs {
      data: None,
    }
  }
}

pub struct UnlockConfigTemplateTbBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> UnlockConfigTemplateTbBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<UnlockConfigTemplate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnlockConfigTemplateTb::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> UnlockConfigTemplateTbBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    UnlockConfigTemplateTbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UnlockConfigTemplateTb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for UnlockConfigTemplateTb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("UnlockConfigTemplateTb");
      ds.field("data", &self.data());
      ds.finish()
  }
}
