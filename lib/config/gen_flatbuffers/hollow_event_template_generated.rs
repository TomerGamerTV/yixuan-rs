// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum HollowEventTemplateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct HollowEventTemplate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HollowEventTemplate<'a> {
  type Inner = HollowEventTemplate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> HollowEventTemplate<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_UNLOCK_CONDITION: flatbuffers::VOffsetT = 6;
  pub const VT_UNK_1: flatbuffers::VOffsetT = 8;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 10;
  pub const VT_CAN_TRIGGER_TIMES: flatbuffers::VOffsetT = 12;
  pub const VT_PRE_ICON_RES: flatbuffers::VOffsetT = 14;
  pub const VT_INTERACT_ICON_TEXTURE_SHEET_ID: flatbuffers::VOffsetT = 16;
  pub const VT_ICON_TEXTURE_SHEET_ID: flatbuffers::VOffsetT = 18;
  pub const VT_TARGET_ID: flatbuffers::VOffsetT = 20;
  pub const VT_PARAM_1: flatbuffers::VOffsetT = 22;
  pub const VT_PARAM_2: flatbuffers::VOffsetT = 24;
  pub const VT_PARAM_3: flatbuffers::VOffsetT = 26;
  pub const VT_PARAM_4: flatbuffers::VOffsetT = 28;
  pub const VT_PARAM_5: flatbuffers::VOffsetT = 30;
  pub const VT_PARAM_6: flatbuffers::VOffsetT = 32;
  pub const VT_PARAM_EXTS: flatbuffers::VOffsetT = 34;
  pub const VT_UNK_3: flatbuffers::VOffsetT = 36;
  pub const VT_UNK_4: flatbuffers::VOffsetT = 38;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    HollowEventTemplate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HollowEventTemplateArgs<'args>
  ) -> flatbuffers::WIPOffset<HollowEventTemplate<'bldr>> {
    let mut builder = HollowEventTemplateBuilder::new(_fbb);
    builder.add_unk_4(args.unk_4);
    builder.add_unk_3(args.unk_3);
    if let Some(x) = args.param_exts { builder.add_param_exts(x); }
    if let Some(x) = args.param_6 { builder.add_param_6(x); }
    if let Some(x) = args.param_5 { builder.add_param_5(x); }
    if let Some(x) = args.param_4 { builder.add_param_4(x); }
    if let Some(x) = args.param_3 { builder.add_param_3(x); }
    if let Some(x) = args.param_2 { builder.add_param_2(x); }
    if let Some(x) = args.param_1 { builder.add_param_1(x); }
    builder.add_target_id(args.target_id);
    builder.add_icon_texture_sheet_id(args.icon_texture_sheet_id);
    builder.add_interact_icon_texture_sheet_id(args.interact_icon_texture_sheet_id);
    if let Some(x) = args.pre_icon_res { builder.add_pre_icon_res(x); }
    builder.add_can_trigger_times(args.can_trigger_times);
    builder.add_type_(args.type_);
    if let Some(x) = args.unk_1 { builder.add_unk_1(x); }
    if let Some(x) = args.unlock_condition { builder.add_unlock_condition(x); }
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(HollowEventTemplate::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unlock_condition(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowEventTemplate::VT_UNLOCK_CONDITION, None)}
  }
  #[inline]
  pub fn unk_1(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(HollowEventTemplate::VT_UNK_1, None)}
  }
  #[inline]
  pub fn type_(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(HollowEventTemplate::VT_TYPE_, Some(0)).unwrap()}
  }
  #[inline]
  pub fn can_trigger_times(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowEventTemplate::VT_CAN_TRIGGER_TIMES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn pre_icon_res(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowEventTemplate::VT_PRE_ICON_RES, None)}
  }
  #[inline]
  pub fn interact_icon_texture_sheet_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowEventTemplate::VT_INTERACT_ICON_TEXTURE_SHEET_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn icon_texture_sheet_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowEventTemplate::VT_ICON_TEXTURE_SHEET_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn target_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(HollowEventTemplate::VT_TARGET_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn param_1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowEventTemplate::VT_PARAM_1, None)}
  }
  #[inline]
  pub fn param_2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowEventTemplate::VT_PARAM_2, None)}
  }
  #[inline]
  pub fn param_3(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowEventTemplate::VT_PARAM_3, None)}
  }
  #[inline]
  pub fn param_4(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowEventTemplate::VT_PARAM_4, None)}
  }
  #[inline]
  pub fn param_5(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowEventTemplate::VT_PARAM_5, None)}
  }
  #[inline]
  pub fn param_6(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(HollowEventTemplate::VT_PARAM_6, None)}
  }
  #[inline]
  pub fn param_exts(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(HollowEventTemplate::VT_PARAM_EXTS, None)}
  }
  #[inline]
  pub fn unk_3(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowEventTemplate::VT_UNK_3, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_4(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HollowEventTemplate::VT_UNK_4, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for HollowEventTemplate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unlock_condition", Self::VT_UNLOCK_CONDITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("unk_1", Self::VT_UNK_1, false)?
     .visit_field::<u32>("type_", Self::VT_TYPE_, false)?
     .visit_field::<i32>("can_trigger_times", Self::VT_CAN_TRIGGER_TIMES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pre_icon_res", Self::VT_PRE_ICON_RES, false)?
     .visit_field::<i32>("interact_icon_texture_sheet_id", Self::VT_INTERACT_ICON_TEXTURE_SHEET_ID, false)?
     .visit_field::<i32>("icon_texture_sheet_id", Self::VT_ICON_TEXTURE_SHEET_ID, false)?
     .visit_field::<u32>("target_id", Self::VT_TARGET_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("param_1", Self::VT_PARAM_1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("param_2", Self::VT_PARAM_2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("param_3", Self::VT_PARAM_3, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("param_4", Self::VT_PARAM_4, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("param_5", Self::VT_PARAM_5, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("param_6", Self::VT_PARAM_6, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("param_exts", Self::VT_PARAM_EXTS, false)?
     .visit_field::<i32>("unk_3", Self::VT_UNK_3, false)?
     .visit_field::<i32>("unk_4", Self::VT_UNK_4, false)?
     .finish();
    Ok(())
  }
}
pub struct HollowEventTemplateArgs<'a> {
    pub id: u32,
    pub unlock_condition: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_1: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub type_: u32,
    pub can_trigger_times: i32,
    pub pre_icon_res: Option<flatbuffers::WIPOffset<&'a str>>,
    pub interact_icon_texture_sheet_id: i32,
    pub icon_texture_sheet_id: i32,
    pub target_id: u32,
    pub param_1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub param_2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub param_3: Option<flatbuffers::WIPOffset<&'a str>>,
    pub param_4: Option<flatbuffers::WIPOffset<&'a str>>,
    pub param_5: Option<flatbuffers::WIPOffset<&'a str>>,
    pub param_6: Option<flatbuffers::WIPOffset<&'a str>>,
    pub param_exts: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub unk_3: i32,
    pub unk_4: i32,
}
impl<'a> Default for HollowEventTemplateArgs<'a> {
  #[inline]
  fn default() -> Self {
    HollowEventTemplateArgs {
      id: 0,
      unlock_condition: None,
      unk_1: None,
      type_: 0,
      can_trigger_times: 0,
      pre_icon_res: None,
      interact_icon_texture_sheet_id: 0,
      icon_texture_sheet_id: 0,
      target_id: 0,
      param_1: None,
      param_2: None,
      param_3: None,
      param_4: None,
      param_5: None,
      param_6: None,
      param_exts: None,
      unk_3: 0,
      unk_4: 0,
    }
  }
}

pub struct HollowEventTemplateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HollowEventTemplateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(HollowEventTemplate::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_unlock_condition(&mut self, unlock_condition: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowEventTemplate::VT_UNLOCK_CONDITION, unlock_condition);
  }
  #[inline]
  pub fn add_unk_1(&mut self, unk_1: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowEventTemplate::VT_UNK_1, unk_1);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: u32) {
    self.fbb_.push_slot::<u32>(HollowEventTemplate::VT_TYPE_, type_, 0);
  }
  #[inline]
  pub fn add_can_trigger_times(&mut self, can_trigger_times: i32) {
    self.fbb_.push_slot::<i32>(HollowEventTemplate::VT_CAN_TRIGGER_TIMES, can_trigger_times, 0);
  }
  #[inline]
  pub fn add_pre_icon_res(&mut self, pre_icon_res: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowEventTemplate::VT_PRE_ICON_RES, pre_icon_res);
  }
  #[inline]
  pub fn add_interact_icon_texture_sheet_id(&mut self, interact_icon_texture_sheet_id: i32) {
    self.fbb_.push_slot::<i32>(HollowEventTemplate::VT_INTERACT_ICON_TEXTURE_SHEET_ID, interact_icon_texture_sheet_id, 0);
  }
  #[inline]
  pub fn add_icon_texture_sheet_id(&mut self, icon_texture_sheet_id: i32) {
    self.fbb_.push_slot::<i32>(HollowEventTemplate::VT_ICON_TEXTURE_SHEET_ID, icon_texture_sheet_id, 0);
  }
  #[inline]
  pub fn add_target_id(&mut self, target_id: u32) {
    self.fbb_.push_slot::<u32>(HollowEventTemplate::VT_TARGET_ID, target_id, 0);
  }
  #[inline]
  pub fn add_param_1(&mut self, param_1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowEventTemplate::VT_PARAM_1, param_1);
  }
  #[inline]
  pub fn add_param_2(&mut self, param_2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowEventTemplate::VT_PARAM_2, param_2);
  }
  #[inline]
  pub fn add_param_3(&mut self, param_3: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowEventTemplate::VT_PARAM_3, param_3);
  }
  #[inline]
  pub fn add_param_4(&mut self, param_4: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowEventTemplate::VT_PARAM_4, param_4);
  }
  #[inline]
  pub fn add_param_5(&mut self, param_5: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowEventTemplate::VT_PARAM_5, param_5);
  }
  #[inline]
  pub fn add_param_6(&mut self, param_6: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowEventTemplate::VT_PARAM_6, param_6);
  }
  #[inline]
  pub fn add_param_exts(&mut self, param_exts: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowEventTemplate::VT_PARAM_EXTS, param_exts);
  }
  #[inline]
  pub fn add_unk_3(&mut self, unk_3: i32) {
    self.fbb_.push_slot::<i32>(HollowEventTemplate::VT_UNK_3, unk_3, 0);
  }
  #[inline]
  pub fn add_unk_4(&mut self, unk_4: i32) {
    self.fbb_.push_slot::<i32>(HollowEventTemplate::VT_UNK_4, unk_4, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HollowEventTemplateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HollowEventTemplateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HollowEventTemplate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for HollowEventTemplate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("HollowEventTemplate");
      ds.field("id", &self.id());
      ds.field("unlock_condition", &self.unlock_condition());
      ds.field("unk_1", &self.unk_1());
      ds.field("type_", &self.type_());
      ds.field("can_trigger_times", &self.can_trigger_times());
      ds.field("pre_icon_res", &self.pre_icon_res());
      ds.field("interact_icon_texture_sheet_id", &self.interact_icon_texture_sheet_id());
      ds.field("icon_texture_sheet_id", &self.icon_texture_sheet_id());
      ds.field("target_id", &self.target_id());
      ds.field("param_1", &self.param_1());
      ds.field("param_2", &self.param_2());
      ds.field("param_3", &self.param_3());
      ds.field("param_4", &self.param_4());
      ds.field("param_5", &self.param_5());
      ds.field("param_6", &self.param_6());
      ds.field("param_exts", &self.param_exts());
      ds.field("unk_3", &self.unk_3());
      ds.field("unk_4", &self.unk_4());
      ds.finish()
  }
}
pub enum HollowEventTemplateTbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct HollowEventTemplateTb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HollowEventTemplateTb<'a> {
  type Inner = HollowEventTemplateTb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> HollowEventTemplateTb<'a> {
  pub const VT_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    HollowEventTemplateTb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HollowEventTemplateTbArgs<'args>
  ) -> flatbuffers::WIPOffset<HollowEventTemplateTb<'bldr>> {
    let mut builder = HollowEventTemplateTbBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    builder.finish()
  }


  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HollowEventTemplate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HollowEventTemplate>>>>(HollowEventTemplateTb::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for HollowEventTemplateTb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<HollowEventTemplate>>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct HollowEventTemplateTbArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HollowEventTemplate<'a>>>>>,
}
impl<'a> Default for HollowEventTemplateTbArgs<'a> {
  #[inline]
  fn default() -> Self {
    HollowEventTemplateTbArgs {
      data: None,
    }
  }
}

pub struct HollowEventTemplateTbBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HollowEventTemplateTbBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<HollowEventTemplate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HollowEventTemplateTb::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HollowEventTemplateTbBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HollowEventTemplateTbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HollowEventTemplateTb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for HollowEventTemplateTb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("HollowEventTemplateTb");
      ds.field("data", &self.data());
      ds.finish()
  }
}
